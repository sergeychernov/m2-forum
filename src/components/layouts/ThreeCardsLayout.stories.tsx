import type { Meta, StoryObj } from '@storybook/react';
import ThreeCardsLayout from './ThreeCardsLayout';
import ConclusionCard from '../cards/ConclusionCard';
import FeaturesListCard from '../cards/FeaturesListCard';
import ImageCard from '../cards/ImageCard';
import ModelCard from '../cards/ModelCard';
import PointsList from '../cards/PointsList';
import QRCard from '../cards/QRCard';
import TaskCard from '../cards/TaskCard';
import ToolCard from '../cards/ToolCard';
import CardsLayout from "./CardsLayout";

// –¢–∏–ø—ã –∫–∞—Ä—Ç–æ—á–µ–∫
const CARD_TYPES = {
    ConclusionCard: 'ConclusionCard',
    FeaturesListCard: 'FeaturesListCard',
    ImageCard: 'ImageCard',
    ModelCard: 'ModelCard',
    PointsList: 'PointsList',
    QRCard: 'QRCard',
    TaskCard: 'TaskCard',
    ToolCard: 'ToolCard'
} as const;

type CardType = keyof typeof CARD_TYPES;

// –¢–∏–ø –¥–ª—è props
type ThreeCardsLayoutProps = React.ComponentProps<typeof ThreeCardsLayout> & {
    cardType: CardType;
};

// –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
const sampleFeatures = [
    { icon: 'üöÄ', text: '–ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' },
    { icon: 'üéØ', text: '–¢–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã' },
    { icon: '‚ö°', text: '–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
];

const sampleModels = [
    { icon: '‚ö°', name: 'Cursor', description: '–£ –Ω–µ–≥–æ –µ—Å—Ç—å Team —Ç–∞—Ä–∏—Ñ' },
    { icon: 'üîí', name: 'Gemini plugin', description: '–¢—Ä—É–¥–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å' },
    { icon: 'ÔøΩÔøΩ', name: 'Trae.ai', description: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è Cursor' },
];

const sampleTasks = [
    {
        title: 'E2E —Ç–µ—Å—Ç—ã',
        description: '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –Ω–æ –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω—è—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å',
        tool: 'gemini, claude',
        rating: 'conditional' as const,
        icon: 'üß™'
    },
    {
        title: '–†–∞–∑–±–æ—Ä –ª–æ–≥–æ–≤',
        description: '–ù–∞—Ö–æ–¥–∏—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –Ω–æ –º–æ–∂–µ—Ç —É–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç',
        tool: 'gemini, gpt, claude',
        rating: 'satisfactory' as const,
        icon: 'üîç'
    },
    {
        title: 'Unit —Ç–µ—Å—Ç—ã',
        description: '–û—Ç–ª–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –∏ –º–æ–∫–∏',
        tool: 'cursor, gpt',
        rating: 'excellent' as const,
        icon: '‚ö°'
    },
];

const sampleQRCards = [
    {
        title: 'GitHub',
        url: 'https://github.com',
        description: '–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞',
        icon: 'üîó'
    },
    {
        title: 'Documentation',
        url: 'https://docs.example.com',
        description: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
        icon: 'üìö'
    },
    {
        title: 'Demo',
        url: 'https://demo.example.com',
        description: '–î–µ–º–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        icon: 'üéÆ'
    },
];

const sampleConclusions = [
    {
        text: '–û–±—â–∏–µ –≤—ã–≤–æ–¥—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É',
        index: 0
    },
    {
        text: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è',
        index: 1
    },
    {
        text: '–ü–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ',
        index: 2
    },
];

const sampleTools = [
    {
        title: 'VS Code',
        category: 'IDE',
        features: sampleFeatures,
        note: { type: 'note' as const, text: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö' }
    },
    {
        title: 'WebStorm',
        category: 'IDE',
        features: sampleFeatures,
        note: { type: 'warning' as const, text: '–ü–ª–∞—Ç–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è' }
    },
    {
        title: 'Cursor',
        category: 'AI IDE',
        features: sampleFeatures,
        note: { type: 'advantage' as const, text: '–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫' }
    },
];

const sampleImages = [
    {
        src: '/img/end-to-end-images.jpeg',
        alt: 'E2E testing illustration',
        maxHeight: '300px'
    },
    {
        src: '/img/regex-example.png',
        alt: 'Regex example',
        maxHeight: '250px'
    },
    {
        src: '/img/end-to-end-images.jpeg',
        alt: 'Another illustration',
        maxHeight: '200px'
    },
];

const samplePointsLists = [
    {
        items: [
            '–ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
            '–¢–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
            '–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
        ],
        bulletColor: '#1890ff'
    },
    {
        items: [
            '–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
            '–ì–∏–±–∫–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            '–û—Ç–ª–∏—á–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'
        ],
        bulletColor: '#52c41a'
    },
    {
        items: [
            '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è',
            '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            '–ù–∞–¥–µ–∂–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'
        ],
        bulletColor: '#722ed1'
    },
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ç–∏–ø—É
const renderCards = (cardType: CardType) => {
    const cards = [];

    for (let i = 0; i < 3; i++) {
        switch (cardType) {
            case 'ConclusionCard':
                const conclusionData = sampleConclusions[i % sampleConclusions.length];
                cards.push(
                    <ConclusionCard
                        key={`conclusion-${i}`}
                        text={conclusionData.text}
                        index={conclusionData.index}
                    />
                );
                break;

            case 'FeaturesListCard':
                const featureData = sampleTools[i % sampleTools.length];
                cards.push(
                    <FeaturesListCard
                        key={`features-${i}`}
                        title={featureData.title}
                        category={featureData.category}
                        features={featureData.features}
                        note={featureData.note}
                    />
                );
                break;

            case 'ImageCard':
                const imageData = sampleImages[i % sampleImages.length];
                cards.push(
                    <ImageCard
                        key={`image-${i}`}
                        src={imageData.src}
                        alt={imageData.alt}
                        maxHeight={imageData.maxHeight}
                    />
                );
                break;

            case 'ModelCard':
                const modelData = sampleModels[i % sampleModels.length];
                cards.push(
                    <ModelCard
                        key={`model-${i}`}
                        icon={modelData.icon}
                        name={modelData.name}
                        description={modelData.description}
                    />
                );
                break;

            case 'PointsList':
                const pointsData = samplePointsLists[i % samplePointsLists.length];
                cards.push(
                    <PointsList
                        key={`points-${i}`}
                        items={pointsData.items}
                        bulletColor={pointsData.bulletColor}
                    />
                );
                break;

            case 'QRCard':
                const qrData = sampleQRCards[i % sampleQRCards.length];
                cards.push(
                    <QRCard
                        key={`qr-${i}`}
                        title={qrData.title}
                        url={qrData.url}
                        description={qrData.description}
                        icon={qrData.icon}
                    />
                );
                break;

            case 'TaskCard':
                const taskData = sampleTasks[i % sampleTasks.length];
                cards.push(
                    <TaskCard
                        key={`task-${i}`}
                        title={taskData.title}
                        description={taskData.description}
                        tool={taskData.tool}
                        rating={taskData.rating}
                        icon={taskData.icon}
                    />
                );
                break;

            case 'ToolCard':
                const toolData = sampleTools[i % sampleTools.length];
                cards.push(
                    <ToolCard
                        key={`tool-${i}`}
                        title={toolData.title}
                        category={toolData.category}
                        features={toolData.features}
                        note={toolData.note}
                    />
                );
                break;

            default:
                break;
        }
    }

    return cards;
};

const meta: Meta<ThreeCardsLayoutProps> = {
    title: 'Layouts/ThreeCardsLayout',
    component: ThreeCardsLayout,
    parameters: {
        layout: 'fullscreen',
    },
    argTypes: {
        cardType: {
            control: { type: 'select' },
            options: Object.keys(CARD_TYPES),
            description: '–¢–∏–ø –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        },
        colsRatio: {
            control: { type: 'select' },
            options: [
                '1x2:1', '2x2:3', '3x2:2', '3x2:5', '5x2:3',
                '1:1x2', '2:3x2', '3:2x2', '3:5x2', '5:3x2'
            ],
        },
        horizontalGap: {
            control: { type: 'select' },
            options: ['none', 'small', 'medium', 'large'],
        },
        verticalGap: {
            control: { type: 'select' },
            options: ['none', 'small', 'medium', 'large'],
        },
        contentWidth: {
            control: { type: 'select' },
            options: ['narrow', 'medium', 'wide', 'full'],
        },
        contentAlign: {
            control: { type: 'select' },
            options: ['top', 'center', 'bottom'],
        },
        animation: {
            control: { type: 'object' },
        },
    },
};

export default meta;
type Story = StoryObj<ThreeCardsLayoutProps>;

// –ò—Å—Ç–æ—Ä–∏—è —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –∫–∞—Ä—Ç–æ—á–µ–∫
export const DynamicCards: Story = {
    args: {
        cardType: 'FeaturesListCard',
        colsRatio: '1x2:1',
        horizontalGap: 'medium',
        verticalGap: 'medium',
        contentWidth: 'wide',
        contentAlign: 'top',
        animation: {
            animationType: 'bubbling',
            animationDelay: 150,
            isActive: true,
            isVisited: false
        },
    },
    render: (args) => {
        const { cardType, ...layoutProps } = args;
        return (
            <ThreeCardsLayout {...layoutProps}>
                {renderCards(cardType)}
            </ThreeCardsLayout>
        );
    },
};