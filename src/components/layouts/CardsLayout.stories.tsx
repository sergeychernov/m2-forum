import type { Meta, StoryObj } from '@storybook/react';
import CardsLayout from './CardsLayout';
import ThreeCardsLayout from './ThreeCardsLayout';
import SlideWrapper from '../SlideWrapper';
import ConclusionCard from '../cards/ConclusionCard';
import FeaturesListCard from '../cards/FeaturesListCard';
import ImageCard from '../cards/ImageCard';
import ModelCard from '../cards/ModelCard';
import PointsList from '../cards/PointsList';
import QRCard from '../cards/QRCard';
import TaskCard from '../cards/TaskCard';
// –£–¥–∞–ª–∏—Ç—å –∏–º–ø–æ—Ä—Ç
// import ToolCard from '../cards/ToolCard';

// –¢–∏–ø—ã –ª–µ–π–∞—É—Ç–æ–≤
const LAYOUT_TYPES = {
  CardsLayout: 'CardsLayout',
  ThreeCardsLayout: 'ThreeCardsLayout'
} as const;

type LayoutType = keyof typeof LAYOUT_TYPES;

// –¢–∏–ø—ã –∫–∞—Ä—Ç–æ—á–µ–∫
const CARD_TYPES = {
  ConclusionCard: 'ConclusionCard',
  FeaturesListCard: 'FeaturesListCard',
  ImageCard: 'ImageCard',
  ModelCard: 'ModelCard',
  PointsList: 'PointsList',
  QRCard: 'QRCard',
  TaskCard: 'TaskCard'
  // ToolCard: 'ToolCard' - —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
} as const;

type CardType = keyof typeof CARD_TYPES;

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
type CardsLayoutProps = React.ComponentProps<typeof CardsLayout>;
type ThreeCardsLayoutProps = React.ComponentProps<typeof ThreeCardsLayout>;

// –¢–∏–ø—ã –¥–ª—è ThreeCardsLayout
type ThreeColsRatio = '1x2:1' | '2x2:3' | '3x2:2' | '3x2:5' | '5x2:3' | '1:1x2' | '2:3x2' | '3:2x2' | '3:5x2' | '5:3x2';

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è props
type LayoutProps = {
  layoutType: LayoutType;
  cardType: CardType;
  cardCount: number;
  // –û–±—â–∏–µ –ø—Ä–æ–ø—Å—ã
  horizontalGap?: 'none' | 'small' | 'medium' | 'large';
  verticalGap?: 'none' | 'small' | 'medium' | 'large';
  contentWidth?: 'narrow' | 'medium' | 'wide' | 'full';
  contentAlign?: 'top' | 'center' | 'bottom';
  className?: string;
  // –ü—Ä–æ–ø—Å—ã –¥–ª—è CardsLayout - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
  cols?: '1' | '2' | '3' | '4' | 'auto';
  colsRatio?: CardsLayoutProps['colsRatio']; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –∏–∑ CardsLayout
  // –ü—Ä–æ–ø—Å—ã –¥–ª—è ThreeCardsLayout
  threeColsRatio?: ThreeColsRatio;
  // –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–ø—Å—ã
  animationType?: 'none' | 'bubbling' | 'grasshopper' | 'pendulum' | 'appearance' | 'explosion' | 'ghost';
  animationDelay?: number;
  isActive?: boolean;
  isVisited?: boolean;
};

// –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
const sampleFeatures = [
  { icon: 'üöÄ', text: '–ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' },
  { icon: 'üéØ', text: '–¢–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã' },
  { icon: '‚ö°', text: '–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
];

const sampleModels = [
  { icon: '‚ö°', name: 'Cursor', description: '–£ –Ω–µ–≥–æ –µ—Å—Ç—å Team —Ç–∞—Ä–∏—Ñ' },
  { icon: 'üîí', name: 'Gemini plugin', description: '–¢—Ä—É–¥–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å' },
  { icon: 'üîÑ', name: 'Trae.ai', description: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è Cursor' },
];

const sampleTasks = [
  {
    title: 'E2E —Ç–µ—Å—Ç—ã',
    description: '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –Ω–æ –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω—è—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å',
    tool: 'gemini, claude',
    rating: 'conditional' as const,
    icon: 'üß™'
  },
  {
    title: '–†–∞–∑–±–æ—Ä –ª–æ–≥–æ–≤',
    description: '–ù–∞—Ö–æ–¥–∏—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –Ω–æ –º–æ–∂–µ—Ç —É–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç',
    tool: 'gemini, gpt, claude',
    rating: 'satisfactory' as const,
    icon: 'üîç'
  },
];

const sampleQRCards = [
  {
    title: 'GitHub',
    url: 'https://github.com',
    description: '–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞',
    icon: 'üîó'
  },
  {
    title: 'Documentation',
    url: 'https://docs.example.com',
    description: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
    icon: 'üìö'
  },
];

const sampleConclusions = [
  {
    text: '–û–±—â–∏–µ –≤—ã–≤–æ–¥—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É',
    index: 0
  },
  {
    text: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è',
    index: 1
  },
];

const sampleTools = [
  {
    title: 'VS Code',
    category: 'IDE',
    features: sampleFeatures,
    note: { type: 'note' as const, text: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö' }
  },
  {
    title: 'WebStorm',
    category: 'IDE',
    features: sampleFeatures,
    note: { type: 'warning' as const, text: '–ü–ª–∞—Ç–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è' }
  },
];

const sampleImages = [
  {
    src: '/img/end-to-end-images.jpeg',
    alt: 'E2E testing illustration',
    maxHeight: '300px'
  },
  {
    src: '/img/regex-example.png',
    alt: 'Regex example',
    maxHeight: '250px'
  },
];

const samplePointsLists = [
  {
    items: [
      '–ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
      '–¢–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
      '–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    ],
    bulletColor: '#1890ff'
  },
  {
    items: [
      '–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
      '–ì–∏–±–∫–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫',
      '–û—Ç–ª–∏—á–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'
    ],
    bulletColor: '#52c41a'
  },
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ç–∏–ø—É
const renderCards = (
  cardType: CardType, 
  count: number, 
  animationProps?: {
    animationType?: 'none' | 'bubbling' | 'grasshopper' | 'pendulum' | 'appearance' | 'explosion' | 'ghost';
    animationDelay?: number;
    isActive?: boolean;
    isVisited?: boolean;
  }
) => {
  const cards = [];
  
  for (let i = 0; i < count; i++) {
    switch (cardType) {
      case 'ConclusionCard':
        const conclusionData = sampleConclusions[i % sampleConclusions.length];
        cards.push(
          <ConclusionCard
            key={`conclusion-${i}`}
            text={conclusionData.text}
            index={conclusionData.index}
          />
        );
        break;
        
      case 'FeaturesListCard':
        const featureData = sampleTools[i % sampleTools.length];
        cards.push(
          <FeaturesListCard
            key={`features-${i}`}
            title={featureData.title}
            category={featureData.category}
            features={featureData.features}
            note={featureData.note}
            animationType={animationProps?.animationType}
            animationIndex={i}
            animationDelay={animationProps?.animationDelay}
            isActive={animationProps?.isActive}
            isVisited={animationProps?.isVisited}
          />
        );
        break;
        
      case 'ImageCard':
        const imageData = sampleImages[i % sampleImages.length];
        cards.push(
          <ImageCard
            key={`image-${i}`}
            src={imageData.src}
            alt={imageData.alt}
            maxHeight={imageData.maxHeight}
          />
        );
        break;
        
      case 'ModelCard':
        const modelData = sampleModels[i % sampleModels.length];
        cards.push(
          <ModelCard
            key={`model-${i}`}
            icon={modelData.icon}
            name={modelData.name}
            description={modelData.description}
          />
        );
        break;
        
      case 'TaskCard':
        const taskData = sampleTasks[i % sampleTasks.length];
        cards.push(
          <TaskCard
            key={`task-${i}`}
            title={taskData.title}
            description={taskData.description}
            tool={taskData.tool}
            rating={taskData.rating}
            icon={taskData.icon}
          />
        );
        break;
        
      case 'PointsList':
        const pointsData = samplePointsLists[i % samplePointsLists.length];
        cards.push(
          <PointsList
            key={`points-${i}`}
            items={pointsData.items}
            bulletColor={pointsData.bulletColor}
            animationType={animationProps?.animationType}
            animationIndex={i}
            animationDelay={animationProps?.animationDelay}
            isActive={animationProps?.isActive}
            isVisited={animationProps?.isVisited}
          />
        );
        break;
        
      case 'QRCard':
        const qrData = sampleQRCards[i % sampleQRCards.length];
        cards.push(
          <QRCard
            key={`qr-${i}`}
            title={qrData.title}
            url={qrData.url}
            description={qrData.description}
            icon={qrData.icon}
          />
        );
        break;
        
      default:
        break;
    }
  }
  
  return cards;
};

const meta: Meta<LayoutProps> = {
  title: 'Layouts/CardsLayout',
  component: CardsLayout,
  parameters: {
    layout: 'fullscreen',
  },
  argTypes: {
    layoutType: {
      control: { type: 'select' },
      options: Object.keys(LAYOUT_TYPES),
      description: '–¢–∏–ø –ª–µ–π–∞—É—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    },
    cardType: {
      control: { type: 'select' },
      options: Object.keys(CARD_TYPES),
      description: '–¢–∏–ø –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    },
    cardCount: {
      control: { type: 'range', min: 1, max: 12, step: 1 },
      description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫',
    },
    // CardsLayout props
    cols: {
      control: { type: 'select' },
      options: ['1', '2', '3', '4', 'auto'],
      if: { arg: 'layoutType', eq: 'CardsLayout' },
    },
    colsRatio: {
      control: { type: 'select' },
      options: [
        '1',
        '1:1', '2:3', '3:2', '3:5', '5:3',
        '1:1:1', '1:2:1', '2:1:1', '1:1:2', '2:3:2', '1:3:1',
        '1:1:1:1', '1:2:1:1', '1:1:2:1', '1:1:1:2', '2:1:1:1', '1:2:2:1', '2:1:1:2'
      ],
      if: { arg: 'layoutType', eq: 'CardsLayout' },
    },
    // ThreeCardsLayout props
    threeColsRatio: {
      control: { type: 'select' },
      options: ['1x2:1', '2x2:3', '3x2:2', '3x2:5', '5x2:3', '1:1x2', '2:3x2', '3:2x2', '3:5x2', '5:3x2'],
      if: { arg: 'layoutType', eq: 'ThreeCardsLayout' },
      description: '–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è ThreeCardsLayout',
    },
    horizontalGap: {
      control: { type: 'select' },
      options: ['none', 'small', 'medium', 'large'],
    },
    verticalGap: {
      control: { type: 'select' },
      options: ['none', 'small', 'medium', 'large'],
    },
    contentWidth: {
      control: { type: 'select' },
      options: ['narrow', 'medium', 'wide', 'full'],
    },
    animationType: {
      control: { type: 'select' },
      options: ['none', 'bubbling', 'grasshopper', 'pendulum', 'appearance', 'explosion', 'ghost'],
    },
    animationDelay: {
      control: { type: 'range', min: 0, max: 1000, step: 50 },
    },
    isActive: {
      control: { type: 'boolean' },
    },
    isVisited: {
      control: { type: 'boolean' },
    },
  },
};

export default meta;
type Story = StoryObj<LayoutProps>;

// –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –ª–µ–π–∞—É—Ç–æ–≤ –∏ –∫–∞—Ä—Ç–æ—á–µ–∫
export const DynamicCards: Story = {
  parameters: {
    layout: 'fullscreen',
  },
  args: {
    layoutType: 'CardsLayout',
    cardType: 'FeaturesListCard',
    cardCount: 3,
    cols: '3',
    threeColsRatio: '2x2:3',
    horizontalGap: 'medium',
    verticalGap: 'medium',
    contentWidth: 'wide',
    animationType: 'bubbling',
    animationDelay: 150,
    isActive: true,
    isVisited: false,
  },
  render: (args) => {
    const { layoutType, cardType, cardCount, threeColsRatio, ...commonProps } = args;
    const cards = renderCards(cardType, cardCount, {
      animationType: commonProps.animationType,
      animationDelay: commonProps.animationDelay,
      isActive: commonProps.isActive,
      isVisited: commonProps.isVisited
    });
    
    const layoutTitle = layoutType === 'ThreeCardsLayout' ? 'Three Cards Layout' : 'Cards Layout';
    const subtitle = `${cardType} √ó ${cardCount} | ${commonProps.animationType} animation`;
  
    if (layoutType === 'ThreeCardsLayout') {
      return (
        <SlideWrapper
          title={layoutTitle}
          subtitle={subtitle}
          sign="Storybook Demo"
        >
          <ThreeCardsLayout
            colsRatio={threeColsRatio}
            horizontalGap={commonProps.horizontalGap}
            verticalGap={commonProps.verticalGap}
            contentWidth={commonProps.contentWidth}
            contentAlign={commonProps.contentAlign}
            className={commonProps.className}
            animation={{
              animationType: commonProps.animationType,
              animationDelay: commonProps.animationDelay,
              isActive: commonProps.isActive,
              isVisited: commonProps.isVisited
            }}
          >
            {cards}
          </ThreeCardsLayout>
        </SlideWrapper>
      );
    }
  
    return (
      <div style={{ height: '100vh', overflowY: 'auto' }}>
        <SlideWrapper
          title={layoutTitle}
          subtitle={subtitle}
          sign="Storybook Demo"
        >
          <CardsLayout {...commonProps}>
            {cards}
          </CardsLayout>
        </SlideWrapper>
      </div>
    );
  },
};